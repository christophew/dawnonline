// StrokeFont.cs
// Part of "Microbe Patrol" Version 1.0 -- January 15, 2007
// Copyright 2007 Michael Anderson
// Font data is derived from "modern.fon", Copyright (C) 1985 Microsoft Corp.


#region Using Statements
using System;
using System.Collections.Generic;
using Microsoft.Xna.Framework;
#endregion

namespace DawnGame
{
    /// <summary>
    /// A stroke-based font.
    /// </summary>
    public class StrokeFont
    {
        /// <summary>
        /// Add a string of characters to lineList.  The entire string will be centered around (0, 0).
        /// </summary>
        static public void AddStringCentered(string str, List<Line> lineList)
        {
            float totalWidth;
            float totalHeight;
            MeasureString(str, out totalWidth, out totalHeight);
            string[] substringArray = str.Split('\n');
            float xOffset;
            float yOffset = totalHeight / 2;
            foreach (string substring in substringArray)
            {
                float substringWidth;
                float substringHeight;
                MeasureString(substring, out substringWidth, out substringHeight);
                xOffset = -substringWidth / 2;
                AddString(substring, lineList, ref xOffset, ref yOffset);
                yOffset -= lineHeight;
            }
        }


        /// <summary>
        /// Add a string of characters to lineList.  The string origin will be at (0, 0).
        /// </summary>
        static public void AddString(string str, List<Line> lineList)
        {
            float xOffset = 0;
            float yOffset = 0;
            AddString(str, lineList, ref xOffset, ref yOffset);
        }


        /// <summary>
        /// Add a string of characters to lineList.  The string origin will be at (xOffset, yOffset).
        /// After this function returns, (xOffset, yOffset) will indicate the point at the end of the string.
        /// </summary>
        static public void AddString(string str, List<Line> lineList, ref float xOffset, ref float yOffset)
        {
            foreach (char ch in str)
            {
                if (ch == '\n')
                {
                    xOffset = 0;
                    yOffset -= lineHeight;
                }
                else
                {
                    AddCharacter(ch, lineList, ref xOffset, ref yOffset);
                }
            }
        }


        /// <summary>
        /// Determine the width/height of the string.
        /// </summary>
        static public void MeasureString(string str, out float width, out float height)
        {
            width = 0;
            height = 0;
            float curWidth = 0;
            foreach (char ch in str)
            {
                if (ch == '\n')
                {
                    curWidth = 0;
                    height += lineHeight;
                }
                else
                {
                    int index = ch - 0x20;
                    int charWidth = widthArray[index];
                    curWidth += charWidth;
                    if (curWidth > width)
                        width = curWidth;
                    if (height == 0)
                        height = lineHeight;
                }
            }
        }


        /// <summary>
        /// Add a single character to lineList.  The character origin will be at (xOffset, yOffset).
        /// After this function returns, (xOffset, yOffset) will indicate the point at the end of the character.
        /// </summary>
        static public void AddCharacter(char ch, List<Line> lineList, ref float xOffset, ref float yOffset)
        {
            if (ch < minChar || ch > maxChar)
                throw new Exception("Character out of range for font data");

            int index = ch - 0x20;
            int charOffset = offsetArray[index];
            int charWidth = widthArray[index];
            int nextCharOffset = offsetArray[index + 1];
            Vector2 nullVector = new Vector2(-100, -100);
            Vector2 startPos = nullVector;
            Vector2 endPos = nullVector;
            Vector2 curPos = new Vector2(0 + xOffset, 0 + yOffset);
            int offsetCur = charOffset;
            while (offsetCur < nextCharOffset)
            {
                sbyte dx = strokeDataArray[offsetCur++];
                if (dx == -128)
                {
                    // starting a new line
                    startPos = nullVector;
                    continue;
                }
                sbyte dy = strokeDataArray[offsetCur++];
                curPos = new Vector2(curPos.X + dx, curPos.Y - dy);
                if (startPos == nullVector)
                {
                    startPos = curPos;
                }
                else
                {
                    endPos = curPos;
                    Line line = new Line(startPos, endPos);
                    lineList.Add(line);
                    startPos = endPos;
                    endPos = nullVector;
                }
            }
            xOffset += charWidth;
        }


        public static int lineHeight = 30; // spacing between lines
        public static int maxWidth = 30; // max horizontal character spacing
        public static char minChar = '\x20';
        public static char maxChar = '\x7f';
        public static int numChars = maxChar - minChar + 1;

        /// <summary>
        /// Offsets into strokeDataArray per character.
        /// </summary>
        static int[] offsetArray =  
            {
                0, 0, 16, 26, 46, 97, 158, 227, 242, 263, 284, 299, 309, 329, 334, 345, 
                350, 385, 394, 423, 454, 466, 501, 548, 558, 617, 664, 686, 714, 721, 731, 738, 
                778, 886, 901, 946, 983, 1013, 1033, 1048, 1092, 1107, 1112, 1133, 1148, 1158, 1178, 1193, 
                1236, 1262, 1310, 1341, 1382, 1392, 1413, 1423, 1443, 1453, 1465, 1480, 1500, 1505, 1525, 1539, 
                1544, 1559, 1593, 1627, 1656, 1690, 1725, 1741, 1785, 1805, 1821, 1843, 1858, 1863, 1898, 1918, 
                1953, 1987, 2021, 2037, 2072, 2088, 2108, 2118, 2138, 2148, 2166, 2181, 2258, 2263, 2340, 2386, 
                2397, 
            };

        /// <summary>
        /// Width of each character.
        /// </summary>
        static int[] widthArray = 
            {
                16, 10, 16, 21, 20, 24, 26, 10, 14, 14, 16, 26, 10, 26, 10, 22, 
                20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 10, 10, 24, 26, 24, 18, 
                27, 18, 21, 21, 21, 19, 18, 21, 22, 8, 16, 21, 17, 24, 22, 22, 
                21, 22, 21, 20, 16, 22, 18, 24, 20, 18, 20, 14, 14, 14, 22, 14, 
                10, 19, 19, 18, 19, 18, 12, 19, 19, 8, 10, 17, 8, 30, 19, 19, 
                19, 19, 13, 17, 12, 19, 16, 22, 17, 16, 17, 14, 8, 14, 24, 10, 
            };

        /// <summary>
        /// Stroke data for each character.
        /// </summary>
        static sbyte[] strokeDataArray = 
            {
                -128, 5, 4, 0, 14, -128, 0, 5, -1, 1, 1, 1, 1, -1, -1, -1, 
                -128, 4, 4, 0, 7, -128, 8, -7, 0, 7, -128, 11, 0, -7, 32, -128, 
                13, -32, -7, 32, -128, -6, -19, 14, 0, -128, -15, 6, 14, 0, -128, 8, 
                0, 0, 29, -128, 4, -29, 0, 29, -128, 5, -22, -2, -2, -3, -1, -4, 
                0, -3, 1, -2, 2, 0, 2, 1, 2, 1, 1, 2, 1, 6, 2, 2, 
                1, 1, 1, 1, 2, 0, 3, -2, 2, -3, 1, -4, 0, -3, -1, -2, 
                -2, -128, 21, 4, -18, 21, -128, 5, -21, 2, 2, 0, 2, -1, 2, -2, 
                1, -2, 0, -2, -2, 0, -2, 1, -2, 2, -1, 2, 0, 2, 1, 3, 
                1, 3, 0, 3, -1, 2, -1, -128, -4, 14, -2, 1, -1, 2, 0, 2, 
                2, 2, 2, 0, 2, -1, 1, -2, 0, -2, -2, -2, -2, 0, -128, 23, 
                13, 0, -1, -1, -1, -1, 0, -1, 1, -1, 2, -2, 5, -2, 3, -2, 
                2, -2, 1, -4, 0, -2, -1, -1, -1, -1, -2, 0, -2, 1, -2, 1, 
                -1, 7, -4, 1, -1, 1, -2, 0, -2, -1, -2, -2, -1, -2, 1, -1, 
                2, 0, 2, 1, 3, 2, 3, 5, 7, 2, 2, 2, 1, 2, 0, 1, 
                -1, 0, -1, -128, 5, 6, -1, -1, 1, -1, 1, 1, 0, 2, -1, 2, 
                -1, 1, -128, 11, 0, -2, 2, -2, 3, -2, 4, -1, 5, 0, 4, 1, 
                5, 2, 4, 2, 3, 2, 2, -128, 3, 0, 2, 2, 2, 3, 2, 4, 
                1, 5, 0, 4, -1, 5, -2, 4, -2, 3, -2, 2, -128, 8, 10, 0, 
                12, -128, -5, -9, 10, 6, -128, 0, -6, -10, 6, -128, 13, 7, 0, 18, 
                -128, -9, -9, 18, 0, -128, 5, 23, -1, 1, 1, 1, 1, -1, -1, -1, 
                -128, 1, 1, 0, 2, -1, 2, -1, 1, -128, 4, 16, 18, 0, -128, 5, 
                23, -1, 1, 1, 1, 1, -1, -1, -1, -128, 20, 0, -18, 32, -128, 9, 
                4, -3, 1, -2, 3, -1, 5, 0, 3, 1, 5, 2, 3, 3, 1, 2, 
                0, 3, -1, 2, -3, 1, -5, 0, -3, -1, -5, -2, -3, -3, -1, -2, 
                0, -128, 6, 8, 2, -1, 3, -3, 0, 21, -128, 4, 9, 0, -1, 1, 
                -2, 1, -1, 2, -1, 4, 0, 2, 1, 1, 1, 1, 2, 0, 2, -1, 
                2, -2, 3, -10, 10, 14, 0, -128, 5, 4, 11, 0, -6, 8, 3, 0, 
                2, 1, 1, 1, 1, 3, 0, 2, -1, 3, -2, 2, -3, 1, -3, 0, 
                -3, -1, -1, -1, -1, -2, -128, 13, 4, -10, 14, 15, 0, -128, -5, -14, 
                0, 21, -128, 15, 4, -10, 0, -1, 9, 1, -1, 3, -1, 3, 0, 3, 
                1, 2, 2, 1, 3, 0, 2, -1, 3, -2, 2, -3, 1, -3, 0, -3, 
                -1, -1, -1, -1, -2, -128, 16, 7, -1, -2, -3, -1, -2, 0, -3, 1, 
                -2, 3, -1, 5, 0, 5, 1, 4, 2, 2, 3, 1, 1, 0, 3, -1, 
                2, -2, 1, -3, 0, -1, -1, -3, -2, -2, -3, -1, -1, 0, -3, 1, 
                -2, 2, -1, 3, -128, 17, 4, -10, 21, -128, -4, -21, 14, 0, -128, 8, 
                4, -3, 1, -1, 2, 0, 2, 1, 2, 2, 1, 4, 1, 3, 1, 2, 
                2, 1, 2, 0, 3, -1, 2, -1, 1, -3, 1, -4, 0, -3, -1, -1, 
                -1, -1, -2, 0, -3, 1, -2, 2, -2, 3, -1, 4, -1, 2, -1, 1, 
                -2, 0, -2, -1, -2, -3, -1, -4, 0, -128, 16, 11, -1, 3, -2, 2, 
                -3, 1, -1, 0, -3, -1, -2, -2, -1, -3, 0, -1, 1, -3, 2, -2, 
                3, -1, 1, 0, 3, 1, 2, 2, 1, 4, 0, 5, -1, 5, -2, 3, 
                -3, 1, -2, 0, -3, -1, -1, -2, -128, 5, 11, -1, 1, 1, 1, 1, 
                -1, -1, -1, -128, 0, 12, -1, 1, 1, 1, 1, -1, -1, -1, -128, 5, 
                11, -1, 1, 1, 1, 1, -1, -1, -1, -128, 1, 13, -1, 1, -1, -1, 
                1, -1, 1, 1, 0, 2, -1, 2, -1, 1, -128, 20, 7, -16, 9, 16, 
                9, -128, 4, 13, 18, 0, -128, -18, 6, 18, 0, -128, 4, 7, 16, 9, 
                -16, 9, -128, 3, 9, 0, -1, 1, -2, 1, -1, 2, -1, 4, 0, 2, 
                1, 1, 1, 1, 2, 0, 2, -1, 2, -1, 1, -4, 2, 0, 3, -128, 
                0, 5, -1, 1, 1, 1, 1, -1, -1, -1, -128, 18, 12, -1, -2, -2, 
                -1, -3, 0, -2, 1, -1, 1, -1, 3, 0, 3, 1, 2, 2, 1, 3, 
                0, 2, -1, 1, -2, -128, -5, -8, -2, 2, -1, 3, 0, 3, 1, 2, 
                1, 1, -128, 7, -11, -1, 8, 0, 2, 2, 1, 2, 0, 2, -2, 1, 
                -3, 0, -2, -1, -3, -1, -2, -2, -2, -2, -1, -3, -1, -3, 0, -3, 
                1, -2, 1, -2, 2, -1, 2, -1, 3, 0, 3, 1, 3, 1, 2, 2, 
                2, 2, 1, 3, 1, 3, 0, 3, -1, 2, -1, 1, -1, -128, -2, -13, 
                -1, 8, 0, 2, 1, 1, -128, 9, 4, -8, 21, -128, 8, -21, 8, 21, 
                -128, -13, -7, 10, 0, -128, 4, 4, 0, 21, -128, 0, -21, 9, 0, 3, 
                1, 1, 1, 1, 2, 0, 2, -1, 2, -1, 1, -3, 1, -128, -9, 0, 
                9, 0, 3, 1, 1, 1, 1, 2, 0, 3, -1, 2, -1, 1, -3, 1, 
                -9, 0, -128, 18, 9, -1, -2, -2, -2, -2, -1, -4, 0, -2, 1, -2, 
                2, -1, 2, -1, 3, 0, 5, 1, 3, 1, 2, 2, 2, 2, 1, 4, 
                0, 2, -1, 2, -2, 1, -2, -128, 4, 4, 0, 21, -128, 0, -21, 7, 
                0, 3, 1, 2, 2, 1, 2, 1, 3, 0, 5, -1, 3, -1, 2, -2, 
                2, -3, 1, -7, 0, -128, 4, 4, 0, 21, -128, 0, -21, 13, 0, -128, 
                -13, 10, 8, 0, -128, -8, 11, 13, 0, -128, 4, 4, 0, 21, -128, 0, 
                -21, 13, 0, -128, -13, 10, 8, 0, -128, 18, 9, -1, -2, -2, -2, -2, 
                -1, -4, 0, -2, 1, -2, 2, -1, 2, -1, 3, 0, 5, 1, 3, 1, 
                2, 2, 2, 2, 1, 4, 0, 2, -1, 2, -2, 1, -2, 0, -3, -128, 
                -5, 0, 5, 0, -128, 4, 4, 0, 21, -128, 14, -21, 0, 21, -128, -14, 
                -11, 14, 0, -128, 4, 4, 0, 21, -128, 12, 4, 0, 16, -1, 3, -1, 
                1, -2, 1, -2, 0, -2, -1, -1, -1, -1, -3, 0, -2, -128, 4, 4, 
                0, 21, -128, 14, -21, -14, 14, -128, 5, -5, 9, 12, -128, 4, 4, 0, 
                21, -128, 0, 0, 12, 0, -128, 4, 4, 0, 21, -128, 0, -21, 8, 21, 
                -128, 8, -21, -8, 21, -128, 8, -21, 0, 21, -128, 4, 4, 0, 21, -128, 
                0, -21, 14, 21, -128, 0, -21, 0, 21, -128, 9, 4, -2, 1, -2, 2, 
                -1, 2, -1, 3, 0, 5, 1, 3, 1, 2, 2, 2, 2, 1, 4, 0, 
                2, -1, 2, -2, 1, -2, 1, -3, 0, -5, -1, -3, -1, -2, -2, -2, 
                -2, -1, -4, 0, -128, 4, 4, 0, 21, -128, 0, -21, 9, 0, 3, 1, 
                1, 1, 1, 2, 0, 3, -1, 2, -1, 1, -3, 1, -9, 0, -128, 9, 
                4, -2, 1, -2, 2, -1, 2, -1, 3, 0, 5, 1, 3, 1, 2, 2, 
                2, 2, 1, 4, 0, 2, -1, 2, -2, 1, -2, 1, -3, 0, -5, -1, 
                -3, -1, -2, -2, -2, -2, -1, -4, 0, -128, 3, 17, 6, 6, -128, 4, 
                4, 0, 21, -128, 0, -21, 9, 0, 3, 1, 1, 1, 1, 2, 0, 2, 
                -1, 2, -1, 1, -3, 1, -9, 0, -128, 7, 0, 7, 11, -128, 17, 7, 
                -2, -2, -3, -1, -4, 0, -3, 1, -2, 2, 0, 2, 1, 2, 1, 1, 
                2, 1, 6, 2, 2, 1, 1, 1, 1, 2, 0, 3, -2, 2, -3, 1, 
                -4, 0, -3, -1, -2, -2, -128, 8, 4, 0, 21, -128, -7, -21, 14, 0, 
                -128, 4, 4, 0, 15, 1, 3, 2, 2, 3, 1, 2, 0, 3, -1, 2, 
                -2, 1, -3, 0, -15, -128, 1, 4, 8, 21, -128, 8, -21, -8, 21, -128, 
                2, 4, 5, 21, -128, 5, -21, -5, 21, -128, 5, -21, 5, 21, -128, 5, 
                -21, -5, 21, -128, 3, 4, 14, 21, -128, 0, -21, -14, 21, -128, 1, 4, 
                8, 10, 0, 11, -128, 8, -21, -8, 10, -128, 17, 4, -14, 21, -128, 0, 
                -21, 14, 0, -128, -14, 21, 14, 0, -128, 4, 1, 0, 30, -128, 1, -30, 
                0, 30, -128, -1, -30, 7, 0, -128, -7, 30, 7, 0, -128, 0, 4, 14, 
                24, -128, 9, 1, 0, 30, -128, 1, -30, 0, 30, -128, -7, -30, 7, 0, 
                -128, -7, 30, 7, 0, -128, 3, 18, 8, -5, 8, 5, -128, -16, 0, 8, 
                -4, 8, 4, -128, 14, 24, -14, 0, -128, 6, 4, -1, 1, -1, 2, 0, 
                2, 1, 1, 1, -1, -1, -1, -128, 15, 11, 0, 14, -128, 0, -11, -2, 
                -2, -2, -1, -3, 0, -2, 1, -2, 2, -1, 3, 0, 2, 1, 3, 2, 
                2, 2, 1, 3, 0, 2, -1, 2, -2, -128, 4, 4, 0, 21, -128, 0, 
                -11, 2, -2, 2, -1, 3, 0, 2, 1, 2, 2, 1, 3, 0, 2, -1, 
                3, -2, 2, -2, 1, -3, 0, -2, -1, -2, -2, -128, 15, 14, -2, -2, 
                -2, -1, -3, 0, -2, 1, -2, 2, -1, 3, 0, 2, 1, 3, 2, 2, 
                2, 1, 3, 0, 2, -1, 2, -2, -128, 15, 4, 0, 21, -128, 0, -11, 
                -2, -2, -2, -1, -3, 0, -2, 1, -2, 2, -1, 3, 0, 2, 1, 3, 
                2, 2, 2, 1, 3, 0, 2, -1, 2, -2, -128, 3, 17, 12, 0, 0, 
                -2, -1, -2, -1, -1, -2, -1, -3, 0, -2, 1, -2, 2, -1, 3, 0, 
                2, 1, 3, 2, 2, 2, 1, 3, 0, 2, -1, 2, -2, -128, 10, 4, 
                -2, 0, -2, 1, -1, 3, 0, 17, -128, -3, -14, 7, 0, -128, 15, 11, 
                0, 16, -1, 3, -1, 1, -2, 1, -3, 0, -2, -1, -128, 9, -17, -2, 
                -2, -2, -1, -3, 0, -2, 1, -2, 2, -1, 3, 0, 2, 1, 3, 2, 
                2, 2, 1, 3, 0, 2, -1, 2, -2, -128, 4, 4, 0, 21, -128, 0, 
                -10, 3, -3, 2, -1, 3, 0, 2, 1, 1, 3, 0, 10, -128, 3, 4, 
                1, 1, 1, -1, -1, -1, -1, 1, -128, 1, 7, 0, 14, -128, 5, 4, 
                1, 1, 1, -1, -1, -1, -1, 1, -128, 1, 7, 0, 17, -1, 3, -2, 
                1, -2, 0, -128, 4, 4, 0, 21, -128, 10, -14, -10, 10, -128, 4, -4, 
                7, 8, -128, 4, 4, 0, 21, -128, 4, 11, 0, 14, -128, 0, -10, 3, 
                -3, 2, -1, 3, 0, 2, 1, 1, 3, 0, 10, -128, 0, -10, 3, -3, 
                2, -1, 3, 0, 2, 1, 1, 3, 0, 10, -128, 4, 11, 0, 14, -128, 
                0, -10, 3, -3, 2, -1, 3, 0, 2, 1, 1, 3, 0, 10, -128, 8, 
                11, -2, 1, -2, 2, -1, 3, 0, 2, 1, 3, 2, 2, 2, 1, 3, 
                0, 2, -1, 2, -2, 1, -3, 0, -2, -1, -3, -2, -2, -2, -1, -3, 
                0, -128, 4, 11, 0, 21, -128, 0, -18, 2, -2, 2, -1, 3, 0, 2, 
                1, 2, 2, 1, 3, 0, 2, -1, 3, -2, 2, -2, 1, -3, 0, -2, 
                -1, -2, -2, -128, 15, 11, 0, 21, -128, 0, -18, -2, -2, -2, -1, -3, 
                0, -2, 1, -2, 2, -1, 3, 0, 2, 1, 3, 2, 2, 2, 1, 3, 
                0, 2, -1, 2, -2, -128, 4, 11, 0, 14, -128, 0, -8, 1, -3, 2, 
                -2, 2, -1, 3, 0, -128, 14, 14, -1, -2, -3, -1, -3, 0, -3, 1, 
                -1, 2, 1, 2, 2, 1, 5, 1, 2, 1, 1, 2, 0, 1, -1, 2, 
                -3, 1, -3, 0, -3, -1, -1, -2, -128, 5, 4, 0, 17, 1, 3, 2, 
                1, 2, 0, -128, -8, -14, 7, 0, -128, 4, 11, 0, 10, 1, 3, 2, 
                1, 3, 0, 2, -1, 3, -3, -128, 0, -10, 0, 14, -128, 2, 11, 6, 
                14, -128, 6, -14, -6, 14, -128, 3, 11, 4, 14, -128, 4, -14, -4, 14, 
                -128, 4, -14, 4, 14, -128, 4, -14, -4, 14, -128, 3, 11, 11, 14, -128, 
                0, -14, -11, 14, -128, 2, 11, 6, 14, -128, 6, -14, -6, 14, -2, 4, 
                -2, 2, -2, 1, -1, 0, -128, 14, 11, -11, 14, -128, 0, -14, 11, 0, 
                -128, -11, 14, 11, 0, -128, 9, 0, -2, 1, -1, 1, -1, 2, 0, 2, 
                1, 2, 1, 1, 1, 2, 0, 2, -2, 2, -128, 1, -14, -1, 2, 0, 
                2, 1, 2, 1, 1, 1, 2, 0, 2, -1, 2, -4, 2, 4, 2, 1, 
                2, 0, 2, -1, 2, -1, 1, -1, 2, 0, 2, 1, 2, -128, -1, -14, 
                2, 2, 0, 2, -1, 2, -1, 1, -1, 2, 0, 2, 1, 2, 1, 1, 
                2, 1, -128, 4, 0, 0, 32, -128, 5, 0, 2, 1, 1, 1, 1, 2, 
                0, 2, -1, 2, -1, 1, -1, 2, 0, 2, 2, 2, -128, -1, -14, 1, 
                2, 0, 2, -1, 2, -1, 1, -1, 2, 0, 2, 1, 2, 4, 2, -4, 
                2, -1, 2, 0, 2, 1, 2, 1, 1, 1, 2, 0, 2, -1, 2, -128, 
                1, -14, -2, 2, 0, 2, 1, 2, 1, 1, 1, 2, 0, 2, -1, 2, 
                -1, 1, -2, 1, -128, 3, 19, 0, -2, 1, -3, 2, -1, 2, 0, 2, 
                1, 4, 3, 2, 1, 2, 0, 2, -1, 1, -2, -128, -18, 2, 1, -2, 
                2, -1, 2, 0, 2, 1, 4, 3, 2, 1, 2, 0, 2, -1, 1, -3, 
                0, -2, -128, 5, 23, -1, 1, 1, 1, 1, -1, -1, -1, 
            };
    }
}